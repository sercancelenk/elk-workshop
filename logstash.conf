input {
	beats {
    port => 5044
  }
}
filter {
  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }

  #Grokking Spring Boot's default log format
  grok {
    match => [ 
               "message", 
               "(?<lgtime>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9$_]+)\s*:\s+\[(?<applogtype>[A-Za-z0-9-]+)\]+(?<logmessage>.*)"
             ]
    add_tag =>  ["APP_MESSAGE"]
  }

  #Parsing out timestamps which are in timestamp field thanks to previous grok section
  date {
    match => [ "lgtime" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  }
}
output {
  # Print each event to stdout, useful for debugging. Should be commented out in production.
  # Enabling 'rubydebug' codec on the stdout output will make logstash
  # pretty-print the entire event as something similar to a JSON representation.
  stdout {
    codec => rubydebug
  }

  # Sending properly parsed log events to elasticsearch
  elasticsearch {
    hosts =>["localhost"]
  }
}
